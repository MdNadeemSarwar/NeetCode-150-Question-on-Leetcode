
pahle maine sort kardeya decending order me then kth element ke hesab se us array ke kth - 1 q ki kth jo hai wo 0 base indexing karta haina isleye bas us index ko value ko return kardey a
TC-> O(nlogn)
SC-> O(logn)
ye tc or sc stl sort karne pe laga hai 

class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        sort(nums.begin(), nums.end(), greater<int>());
        return nums[k-1];

    }
};


--------------------------------------------------------------------------------------------------------------------------

Heap is a tree-based data structure. Priority Queue heap ko internally use karta hai.
priority_queue<int> by default â†’ Max Heap (sabse bada top pe)
priority_queue<int, vector<int>, greater<int>> â†’ Min Heap (sabse chhota top pe)
ðŸ¤” Why Min Heap here?
Humko k-th largest chahiye. So idea yeh hai:
Ek min-heap banate hain of size k
Jab bhi heap size k se zyada ho jaaye, to chhota element hata do
Jab pura array process ho jaaye, tab heap ke top pe hoga k-th largest

Tc-> O(Loogn)
sc-> o(n)


class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {

       priority_queue<int, vector<int>, greater<int>> minHeap;

        for (int x : nums) {
            minHeap.push(x);                  // Step 1: Push karo
            if (minHeap.size() > k) {
                minHeap.pop();                  // Step 2: Agar size zyada, to chhota hata do
            }
        }

        return minHeap.top();   

    }
};
