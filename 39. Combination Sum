
// Recursion + Backtracking 

class Solution {
public:
    void solve(int i, vector<int>& candidates, int target, vector<int>temp, vector<vector<int>>&ans){
        // ✅ Base Case 1: Target achieved
        if(target == 0){
            ans.push_back(temp);
            return;
        }
        // ✅ Base Case 2: Index out of bounds OR target negative
        if(i == candidates.size() || target < 0){
            return;
        }
         // ✅ Pick current element
        temp.push_back(candidates[i]);
        solve(i, candidates, target - candidates[i], temp, ans); // index nahi badhaya hi mai 

        temp.pop_back(); // ❌ Backtrack: undo the last push

        solve(i+1, candidates, target , temp, ans); // ❌ Don't pick current element, go to next

    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<int>temp;
        vector<vector<int>>ans;
        solve(0, candidates, target, temp, ans);
        return ans;
    }
};
